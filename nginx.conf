daemon off;
worker_processes 1;
error_log /dev/stderr;
pid /tmp/nginx.pid;

events {
    worker_connections 1024;
}

http {
  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" "$upstream_cache_status"';

  proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=graphqlsha_requests:${CACHE_KEYS_ZONE_SIZE} max_size=${CACHE_MAX_SIZE} inactive=${CACHE_KEY_INACTIVE_TIME} use_temp_path=off;

  upstream app {
    server ${FORWARD_HOST};
    keepalive 64;
  }

  server {
    listen *:${LISTEN_PORT};
    server_name _;
    access_log  /dev/stdout  main;
    error_log /dev/stderr;
    auth_basic "Restricted Area";
    auth_basic_user_file /tmp/auth.htpasswd;

    location / {
      proxy_pass http://app;
    }

    location = ${METRICS_PATH} {  # METRICS_MARKER
      auth_basic "off";  # METRICS_MARKER
      allow all;  # METRICS_MARKER
      proxy_pass http://app${METRICS_PATH};  # METRICS_MARKER
    }  # METRICS_MARKER

    location /healthz {
      access_log off;
      auth_basic "off";
      allow all;
      default_type text/plain;
      return 200 "healthy\n";
    }

    location /graphqlsha/ {
        # Define caching rules
        proxy_cache graphqlsha_requests;
        proxy_cache_methods POST;  # Enable caching for POST requests
        proxy_cache_key "$uri$request_body";  # Use URI and request body as cache key
        proxy_cache_valid 200 ${CACHE_TTL};  # Cache 200 responses for CACHE_TTL minutes
        proxy_pass http://app;  # Backend server URL

        proxy_buffers ${PROXY_BUFFERS_NUMBER} ${PROXY_BUFFERS_SIZE};
        proxy_buffer_size ${PROXY_BUFFER_SIZE};

        add_header X-Cache-Status $upstream_cache_status;

        proxy_cache_bypass $http_x_skip_cache;  # Bypass cache if condition is met
        proxy_no_cache $http_x_skip_cache;      # Do not cache if condition is met
    }
  }
}
